# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MinimalisticMBTilesGenerator
                                 A QGIS plugin
 Generate XYZ tiles (MBTiles) only around the features of a given vector layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-28
        copyright            : (C) 2021 by Francesco Frassinelli/Norsk institutt for naturforskning
        email                : francesco.frassinelli@nina.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Frassinelli/Norsk institutt for naturforskning'
__date__ = '2021-06-28'
__copyright__ = '(C) 2021 by Francesco Frassinelli/Norsk institutt for naturforskning'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterNumber,
                       QgsReferencedRectangle,
                       QgsProject)
from qgis import processing
import sqlite3


class MinimalisticMBTilesGeneratorAlgorithm(QgsProcessingAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT_FILE = 'OUTPUT_FILE'
    INPUT = 'INPUT'
    ZOOM_MIN = 'ZOOM_MIN'
    ZOOM_MAX = 'ZOOM_MAX'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ZOOM_MIN,
                self.tr('Minimum zoom'),
                minValue=0,
                maxValue=25,
                defaultValue=0,
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.ZOOM_MAX,
                self.tr('Maximum zoom'),
                minValue=0,
                maxValue=25,
                defaultValue=19,
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT_FILE,
                self.tr('Output file (for MBTiles)'),
                self.tr('MBTiles files (*.mbtiles)'),
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.INPUT, context)
        output_file = self.parameterAsString(parameters, self.OUTPUT_FILE, context)

        min_zoom = self.parameterAsInt(parameters, self.ZOOM_MIN, context)
        max_zoom = self.parameterAsInt(parameters, self.ZOOM_MAX, context)

        crs = QgsProject().instance().crs()

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        # Initialize an almost empty mbtiles files with some basic metadata
        processing.run("qgis:tilesxyzmbtiles", {
            "EXTENT" : QgsReferencedRectangle(source.sourceExtent(), crs),
            "ZOOM_MIN": min_zoom,
            "ZOOM_MAX": min_zoom,
            "OUTPUT_FILE": output_file,
        })

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            bbox = QgsReferencedRectangle(feature.geometry().boundingBox(), crs)
            partial = processing.run("qgis:tilesxyzmbtiles", {
                "EXTENT" : bbox,
                "ZOOM_MIN": min_zoom,
                "ZOOM_MAX": max_zoom,
                "OUTPUT_FILE": QgsProcessing.TEMPORARY_OUTPUT,
            })['OUTPUT_FILE']

            # Add the newly generated tiles to the output file
            with sqlite3.connect(output_file) as conn:
                conn.execute("ATTACH DATABASE ? AS partial", (partial,))
                conn.execute("INSERT OR REPLACE INTO tiles SELECT * FROM partial.tiles")
                conn.execute("UPDATE metadata SET value=(SELECT MIN(zoom_level) FROM tiles) WHERE name='minzoom'")
                conn.execute("UPDATE metadata SET value=(SELECT MAX(zoom_level) FROM tiles) WHERE name='maxzoom'")

            # Update the progress bar
            feedback.setProgress(int(current * total))

        return {self.OUTPUT_FILE: output_file}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Minimalistic MBTiles Generator'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return MinimalisticMBTilesGeneratorAlgorithm()
